package e_oop;

import java.util.Arrays;
import java.util.Scanner;

public class OOP {
	public static void main(String[] args) {
		/*
		 *  OOP(Object Oriented Programming : 객체지향 프로그래밍
		 *  - 프로그래밍을 단순히 코드의 연속으로 보는 것이 아니라 객체 간의 상호작용으로 보는 것
		 *  - 코드의 재사용성이 높고 유지보수가 용이하다
		 *  
		 *  객체 생성(인스턴스화)
		 *  - 클래스를 사용하기 위해 메모리(Heap 영역)에 올려놓은 것
		 *  - new 클래스명(); -> 객체가 저장된 메모리 주소 반환
		 *  - 객체 뒤에 참조연산잔(.)를 붙여 변수와 메서드에 접근할 수 있다
		 *  - 객체는 생성될때 마다 새로운 객체가 생성되고, 여러 개의 객체가 동시에 존재할 수 있다
		 *  - . ==> 하위패키지로 구분됨
		 */
		
		Scanner s = new Scanner(System.in);
		
		SampleClass sc = new SampleClass(); // SampleClass의 객체 생성
		sc.method1(); // 메서드 호출(일 하라고 명령하는 것)
		
		String returnValue = sc.method2(5);
		System.out.println(returnValue);
		
		sc.flowTest1();
		
		ClassMaker cm = new ClassMaker();
		cm.globalVar();
		cm.printParameter(5);
		
		// 문제. 다음을 한줄씩 계산해서 최종 결과값을 출력해주세요.
		
		Calculator cal = new Calculator();
		
		double result = 0;
		
		result = cal.add(123456, 654321);
		result = cal.mul(result, 123456);
		result = cal.dvi(result, 123456);
		result = cal.sub(result, 654321);
		result = cal.mod(result, 123456);
		
		System.out.println("최종 연산 결과 : " + result);
		
		/*
		 *  과제. MyMath 클래스와 아래의 메서드들을 만들어주세요
		 *  - 가장 큰 값
		 *  - 가장 작은 값
		 *  - 원하는 자릿수에서 반올림 (자릿수도 파라미터로 받아야함)
		 *  - int배열 정렬(오름차순, 내림차순 둘다 가능하게)
		 *  - SampleClass의 변수 값을 출력(파라미터 1개만 사용)
		 */
		MyMath myMath = new MyMath();
		
		int[] sampleArray = new int[10];
		double roundNumber = 25.25456;
		int index = 2;
		
		result = myMath.roundNumber(roundNumber, index);
		
		System.out.println(result);
		
		for(int i = 0; i < sampleArray.length; i ++) {
			sampleArray[i] = (int)(Math.random() * 100 + 1);
		}
		System.out.println("sampleArray 배열 : " + Arrays.toString(sampleArray));
		int result0 = myMath.max(sampleArray);
		
		System.out.println("sampleArray 배열의 최댓값 : " + result0);
		
		result0 = myMath.min(sampleArray);
		
		System.out.println("sampleArray 배열의 최솟값 : " + result0);
		
		String temp = s.nextLine();
		
		int tmp[] = myMath.sort(sampleArray, temp);
		
		System.out.println("sampleArray 배열 오름차순 : " + Arrays.toString(tmp));
		
		temp = s.nextLine();
		
		tmp = myMath.sort(sampleArray, temp);
		
		System.out.println("sampleArray 배열 내림차순 : " + Arrays.toString(tmp));
		
		result = myMath.roundNumber(roundNumber, index);
		
		System.out.println(result);
		
		myMath.printSample(sc);
		
	}
}